//------------------------------------------------------------------------------
// <auto-generated>
//    This code was generated from a template.
//
//    Manual changes to this file may cause unexpected behavior in your application.
//    Manual changes to this file will be overwritten if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Aplicatie_medicala.Data_Layer
{
    using System;
    using System.Data.Entity;
    using System.Data.Entity.Infrastructure;
    using System.Data.Objects;
    using System.Data.Objects.DataClasses;
    using System.Linq;
    
    public partial class Aplicatie_medicalaContext : DbContext
    {
        public Aplicatie_medicalaContext()
            : base("name=Aplicatie_medicalaContext")
        {
        }
    
        protected override void OnModelCreating(DbModelBuilder modelBuilder)
        {
            throw new UnintentionalCodeFirstException();
        }
    
        public DbSet<Administrare> Administrares { get; set; }
        public DbSet<Categorie> Categories { get; set; }
        public DbSet<Diagnostic> Diagnostics { get; set; }
        public DbSet<Internari_Externari> Internari_Externari { get; set; }
        public DbSet<Pacienti> Pacientis { get; set; }
        public DbSet<Permisiuni> Permisiunis { get; set; }
        public DbSet<Personal> Personals { get; set; }
        public DbSet<Sectii> Sectiis { get; set; }
        public DbSet<sysdiagram> sysdiagrams { get; set; }
        public DbSet<Tratament> Trataments { get; set; }
    
        public virtual int sp_alterdiagram(string diagramname, Nullable<int> owner_id, Nullable<int> version, byte[] definition)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            var versionParameter = version.HasValue ?
                new ObjectParameter("version", version) :
                new ObjectParameter("version", typeof(int));
    
            var definitionParameter = definition != null ?
                new ObjectParameter("definition", definition) :
                new ObjectParameter("definition", typeof(byte[]));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_alterdiagram", diagramnameParameter, owner_idParameter, versionParameter, definitionParameter);
        }
    
        public virtual int sp_creatediagram(string diagramname, Nullable<int> owner_id, Nullable<int> version, byte[] definition)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            var versionParameter = version.HasValue ?
                new ObjectParameter("version", version) :
                new ObjectParameter("version", typeof(int));
    
            var definitionParameter = definition != null ?
                new ObjectParameter("definition", definition) :
                new ObjectParameter("definition", typeof(byte[]));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_creatediagram", diagramnameParameter, owner_idParameter, versionParameter, definitionParameter);
        }
    
        public virtual int sp_dropdiagram(string diagramname, Nullable<int> owner_id)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_dropdiagram", diagramnameParameter, owner_idParameter);
        }
    
        public virtual ObjectResult<sp_helpdiagramdefinition_Result> sp_helpdiagramdefinition(string diagramname, Nullable<int> owner_id)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_helpdiagramdefinition_Result>("sp_helpdiagramdefinition", diagramnameParameter, owner_idParameter);
        }
    
        public virtual ObjectResult<sp_helpdiagrams_Result> sp_helpdiagrams(string diagramname, Nullable<int> owner_id)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_helpdiagrams_Result>("sp_helpdiagrams", diagramnameParameter, owner_idParameter);
        }
    
        public virtual int sp_renamediagram(string diagramname, Nullable<int> owner_id, string new_diagramname)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            var new_diagramnameParameter = new_diagramname != null ?
                new ObjectParameter("new_diagramname", new_diagramname) :
                new ObjectParameter("new_diagramname", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_renamediagram", diagramnameParameter, owner_idParameter, new_diagramnameParameter);
        }
    
        public virtual int sp_upgraddiagrams()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_upgraddiagrams");
        }
    
        public virtual ObjectResult<Nullable<int>> compare(string diagramname, Nullable<int> owner_id, Nullable<int> version, byte[] definition)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            var versionParameter = version.HasValue ?
                new ObjectParameter("version", version) :
                new ObjectParameter("version", typeof(int));
    
            var definitionParameter = definition != null ?
                new ObjectParameter("definition", definition) :
                new ObjectParameter("definition", typeof(byte[]));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<int>>("compare", diagramnameParameter, owner_idParameter, versionParameter, definitionParameter);
        }
    
        public virtual int insert_Personal(string cnp, string nume, string prenume, string tel, string adr, Nullable<System.DateTime> dataa, Nullable<System.DateTime> datai, string parola, Nullable<int> idcat, Nullable<int> idsec, Nullable<double> sal)
        {
            var cnpParameter = cnp != null ?
                new ObjectParameter("cnp", cnp) :
                new ObjectParameter("cnp", typeof(string));
    
            var numeParameter = nume != null ?
                new ObjectParameter("nume", nume) :
                new ObjectParameter("nume", typeof(string));
    
            var prenumeParameter = prenume != null ?
                new ObjectParameter("prenume", prenume) :
                new ObjectParameter("prenume", typeof(string));
    
            var telParameter = tel != null ?
                new ObjectParameter("tel", tel) :
                new ObjectParameter("tel", typeof(string));
    
            var adrParameter = adr != null ?
                new ObjectParameter("adr", adr) :
                new ObjectParameter("adr", typeof(string));
    
            var dataaParameter = dataa.HasValue ?
                new ObjectParameter("dataa", dataa) :
                new ObjectParameter("dataa", typeof(System.DateTime));
    
            var dataiParameter = datai.HasValue ?
                new ObjectParameter("datai", datai) :
                new ObjectParameter("datai", typeof(System.DateTime));
    
            var parolaParameter = parola != null ?
                new ObjectParameter("parola", parola) :
                new ObjectParameter("parola", typeof(string));
    
            var idcatParameter = idcat.HasValue ?
                new ObjectParameter("idcat", idcat) :
                new ObjectParameter("idcat", typeof(int));
    
            var idsecParameter = idsec.HasValue ?
                new ObjectParameter("idsec", idsec) :
                new ObjectParameter("idsec", typeof(int));
    
            var salParameter = sal.HasValue ?
                new ObjectParameter("sal", sal) :
                new ObjectParameter("sal", typeof(double));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("insert_Personal", cnpParameter, numeParameter, prenumeParameter, telParameter, adrParameter, dataaParameter, dataiParameter, parolaParameter, idcatParameter, idsecParameter, salParameter);
        }
    
        public virtual int insertPersonal(string cnp, string nume, string prenume, string tel, string adr, Nullable<System.DateTime> dataa, Nullable<System.DateTime> datai, string parola, Nullable<int> idcat, Nullable<int> idsec, Nullable<double> sal)
        {
            var cnpParameter = cnp != null ?
                new ObjectParameter("cnp", cnp) :
                new ObjectParameter("cnp", typeof(string));
    
            var numeParameter = nume != null ?
                new ObjectParameter("nume", nume) :
                new ObjectParameter("nume", typeof(string));
    
            var prenumeParameter = prenume != null ?
                new ObjectParameter("prenume", prenume) :
                new ObjectParameter("prenume", typeof(string));
    
            var telParameter = tel != null ?
                new ObjectParameter("tel", tel) :
                new ObjectParameter("tel", typeof(string));
    
            var adrParameter = adr != null ?
                new ObjectParameter("adr", adr) :
                new ObjectParameter("adr", typeof(string));
    
            var dataaParameter = dataa.HasValue ?
                new ObjectParameter("dataa", dataa) :
                new ObjectParameter("dataa", typeof(System.DateTime));
    
            var dataiParameter = datai.HasValue ?
                new ObjectParameter("datai", datai) :
                new ObjectParameter("datai", typeof(System.DateTime));
    
            var parolaParameter = parola != null ?
                new ObjectParameter("parola", parola) :
                new ObjectParameter("parola", typeof(string));
    
            var idcatParameter = idcat.HasValue ?
                new ObjectParameter("idcat", idcat) :
                new ObjectParameter("idcat", typeof(int));
    
            var idsecParameter = idsec.HasValue ?
                new ObjectParameter("idsec", idsec) :
                new ObjectParameter("idsec", typeof(int));
    
            var salParameter = sal.HasValue ?
                new ObjectParameter("sal", sal) :
                new ObjectParameter("sal", typeof(double));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("insertPersonal", cnpParameter, numeParameter, prenumeParameter, telParameter, adrParameter, dataaParameter, dataiParameter, parolaParameter, idcatParameter, idsecParameter, salParameter);
        }
    }
}
